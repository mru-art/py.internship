import json
import os
from datetime import datetime

# File path for storing expenses
FILE_PATH = 'expenses.json'

def load_expenses():
    """
    Load expenses from the JSON file.
    
    Returns:
        dict: A dictionary of expenses loaded from the file. Returns an empty dictionary if the file does not exist.
    """
    if os.path.exists(FILE_PATH):
        with open(FILE_PATH, 'r') as file:
            return json.load(file)
    return {}

def save_expenses(expenses):
    """
    Save expenses to the JSON file.
    
    Args:
        expenses (dict): A dictionary of expenses to be saved to the file.
    """
    with open(FILE_PATH, 'w') as file:
        json.dump(expenses, file, indent=4)

def add_expense(expenses):
    """
    Add a new expense entry to the expense dictionary.
    
    Args:
        expenses (dict): A dictionary of existing expenses to which the new expense will be added.
    """
    try:
        date = datetime.now().strftime('%Y-%m-%d')
        amount = float(input("Enter the amount spent: "))
        description = input("Enter a description for the expense: ")
        category = input("Enter the category of the expense: ")
        
        # Validate the amount
        if amount <= 0:
            raise ValueError("Amount must be greater than zero.")
        
        # Add the expense to the dictionary
        if date not in expenses:
            expenses[date] = []

        expenses[date].append({
            'amount': amount,
            'description': description,
            'category': category
        })
        
        print("Expense added successfully.")
    except ValueError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

def view_expenses(expenses):
    """
    View and print all expenses stored in the expense dictionary.
    
    Args:
        expenses (dict): A dictionary of expenses to be viewed.
    """
    if not expenses:
        print("No expenses recorded.")
        return

    for date, records in expenses.items():
        print(f"\nDate: {date}")
        for record in records:
            print(f"  Amount: ${record['amount']:.2f}")
            print(f"  Description: {record['description']}")
            print(f"  Category: {record['category']}")

def main():
    """
    Main function to run the expense tracker application.
    Provides a menu for adding expenses, viewing expenses, or exiting the program.
    """
    expenses = load_expenses()
    
    while True:
        print("\nExpense Tracker")
        print("1. Add Expense")
        print("2. View Expenses")
        print("3. Exit")
        
        choice = input("Choose an option (1/2/3): ")
        
        if choice == '1':
            add_expense(expenses)
            save_expenses(expenses)
        elif choice == '2':
            view_expenses(expenses)
        elif choice == '3':
            print("Exiting the program.")
            break
        else:
            print("Invalid option. Please choose 1, 2, or 3.")

if __name__ == "__main__":
    main()
